# Generated by Django 4.1.5 on 2023-04-18 13:09

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import kinetics.internal.models.validators.matrix_validators


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="InputData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "initial_time",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="Начальное время t0",
                    ),
                ),
                (
                    "time",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="Время t",
                    ),
                ),
                (
                    "step",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="Шаг",
                    ),
                ),
                (
                    "matrix_stechiometric_coefficients",
                    models.TextField(
                        validators=[kinetics.internal.models.validators.matrix_validators.stechiometric_validator],
                        verbose_name="Матрица стехиометрических коэффициентов",
                    ),
                ),
                (
                    "matrix_indicators",
                    models.TextField(
                        validators=[kinetics.internal.models.validators.matrix_validators.min_max_validator],
                        verbose_name="Матрица показателей степени",
                    ),
                ),
                (
                    "experimental_data",
                    models.TextField(
                        validators=[kinetics.internal.models.validators.matrix_validators.min_max_validator],
                        verbose_name="Экспериментальные данные",
                    ),
                ),
                (
                    "constants_speed",
                    models.TextField(
                        validators=[kinetics.internal.models.validators.matrix_validators.min_max_validator],
                        verbose_name="Константы скорости",
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("EXPLICIT_EULER", "Явный метод Эйлера"),
                            ("IMPLICIT_EULER", "Неявный метод Эйлера"),
                            ("SEMI_IMPLICIT_EULER", "Полу-неявный метод Эйлера"),
                            ("TRAPEZOID", "Метод трапеций"),
                            ("MIDDLE", "Метод средней точки"),
                            ("EXPLICIT_RK2", "Явный метод Рунге-Кутты 2-го порядка"),
                            ("IMPLICIT_RK2", "Неявный метод Рунге-Кутты 2-го порядка"),
                            ("SEMI_IMPLICIT_RK2", "Полу-неявный метод Рунге-Кутты 2-го порядка"),
                            ("EXPLICIT_RK4", "Явный метод Рунге-Кутты 4-го порядка"),
                            ("IMPLICIT_RK4", "Неявный метод Рунге-Кутты 4-го порядка"),
                            ("SEMI_IMPLICIT_RK4", "Полу-неявный метод Рунге-Кутты 4-го порядка"),
                            ("KM", "Метод Кутты-Мерсона"),
                            ("RKF", "Метод Рунге-Кутты-Фелберга"),
                            ("EXPLICIT_ADAMS", "Явный двухшаговый метод Адамса"),
                        ],
                        default="EXPLICIT_EULER",
                        max_length=255,
                        verbose_name="Метод решения",
                    ),
                ),
            ],
            options={
                "verbose_name": "Input Data",
            },
        ),
        migrations.CreateModel(
            name="TableParameters",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "components",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2),
                            django.core.validators.MaxValueValidator(20),
                        ],
                        verbose_name="Количество компонентов",
                    ),
                ),
                (
                    "stages",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                        verbose_name="Количество стадий",
                    ),
                ),
                (
                    "experiments",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                        verbose_name="Количество экспериментов",
                    ),
                ),
            ],
            options={
                "verbose_name": "Table Parameters",
            },
        ),
        migrations.CreateModel(
            name="SolutionData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("result", models.TextField(verbose_name="Данные, расчитанные выбранным методом")),
                ("experimental_point", models.TextField(verbose_name="Значение в эксп. точках")),
                ("time", models.TextField(verbose_name="Время")),
                (
                    "input_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kinetics.inputdata",
                        verbose_name="Входные данные",
                    ),
                ),
            ],
            options={
                "verbose_name": "Solution Data",
            },
        ),
        migrations.AddField(
            model_name="inputdata",
            name="table_parameters",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kinetics.tableparameters",
                verbose_name="Параметры таблицы",
            ),
        ),
    ]
